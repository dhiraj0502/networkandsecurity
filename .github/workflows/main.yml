name: CI/CD Pipeline

on:
  push:
    branches:
      - main  # Trigger on changes to the 'main' branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Step 1: Checkout the code from GitHub
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up Docker Buildx (needed for multi-platform builds, optional)
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Step 3: Build Docker image
    - name: Build Docker image
      run: |
        docker build -t app .

    # Step 4: Log in to Docker Hub (or your private registry)
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}  # Docker Hub username stored in GitHub Secrets
        password: ${{ secrets.DOCKER_PASSWORD }}  # Docker Hub password stored in GitHub Secrets

    # Step 5: Push the image to Docker Hub
    - name: Push Docker image to Docker Hub
      run: |
        docker tag docker ${{ secrets.DOCKER_USERNAME }}/docker:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/docker:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build  # This ensures that deployment only happens after the build step

    steps:
    # Step 1: Checkout code (again for deployment context)
    - name: Checkout code
      uses: actions/checkout@v2

    # Step 2: Set up SSH connection to EC2
    - name: Set up SSH for deployment
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.EC2_HOST }}  # EC2 instance IP stored in GitHub Secrets
        username: ec2-user  # default user for Amazon Linux 2
        key: ${{ secrets.EC2_SSH_KEY }}  # Private key stored in GitHub Secrets
        script: |
          # Pull the new Docker image from Docker Hub
          docker pull ${{ secrets.DOCKER_USERNAME }}/docker:latest
          
          # Stop and remove the old container
          docker stop doccontainer || true
          docker rm doccontainer || true

          # Run the new Docker container
          docker run -d --name doccontainer -p 80:80 ${{ secrets.DOCKER_USERNAME }}/docker:latest
